version: "3.9"

services:
  database:
    image: postgres:14.0-alpine3.14
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: bitnami/redis:6.2
    environment:
      - REDIS_PASSWORD=${REDIS_PASS}
    networks:
      - backend

  user-api:
    image: area/user-api
    build:
      context: backend
      dockerfile: userAPI/Dockerfile
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=$USER_API_PORT
      - API_SESSION_SECRET=$USER_API_SESSION_SECRET
      - API_SESSION_MAX_AGE=$USER_API_SESSION_MAX_AGE
      - API_SESSION_SECURE=$USER_API_SESSION_SECURE
      - DB_HOST=database
      - DB_PORT
      - DB_URL=postgresql://$DB_USER:$DB_PASS@database:$DB_PORT/$DB_NAME?schema=$DB_USER_SCHEMA
      - REDIS_PASS
      - REDIS_HOST=redis
      - REDIS_PORT
      - WORKFLOW_API_PORT
      - WORKFLOW_API_HOST=workflow-api
      - CREDENTIAL_API_PORT
      - CREDENTIAL_API_HOST=credential-api
    ports:
      - "${USER_API_PORT}:${USER_API_PORT}"
    networks:
      - backend
    depends_on:
      - database
      - redis

  workflow-api:
    image: area/workflow-api
    build:
      context: backend
      dockerfile: workflowAPI/Dockerfile
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=$WORKFLOW_API_PORT
      - DB_HOST=database
      - DB_PORT
      - DB_URL=postgresql://$DB_USER:$DB_PASS@database:$DB_PORT/$DB_NAME?schema=$DB_WORKFLOW_SCHEMA
    ports:
      - "${WORKFLOW_API_PORT}:${WORKFLOW_API_PORT}"
    networks:
      - backend
    depends_on:
      - database

  credential-api:
    image: area/credential-api
    build:
      context: backend
      dockerfile: credentialAPI/Dockerfile
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=$CREDENTIAL_API_PORT
      - DB_HOST=database
      - DB_PORT
      - DB_URL=postgresql://$DB_USER:$DB_PASS@database:$DB_PORT/$DB_NAME?schema=$DB_CREDENTIAL_SCHEMA
    ports:
      - "${CREDENTIAL_API_PORT}:${CREDENTIAL_API_PORT}"
    networks:
      - backend
    depends_on:
      - database

  grpc-doc:
    image: area/grpc-doc
    build:
      context: protos
      dockerfile: Dockerfile
    ports:
      - "${GRPC_DOC_PORT}:80"

networks:
  backend:

volumes:
  postgres_data:
