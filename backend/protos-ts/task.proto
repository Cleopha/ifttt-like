syntax = "proto3";

// Area Workflow API
package area.task;

// Imports
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

// Options
option go_package = "./";


// Task kind
enum TaskType {
  ACTION = 0; // Wait for an action
  REACTION = 1; // React to an action
}

// Available action in the project
// It will be completed with time
enum TaskAction {
  GITHUB_PR_MERGE = 0;    // Action
  GITHUB_ISSUE_CLOSE = 1; // Action & reaction
  TIMER_DATE = 2;         // Action
  TIMER_INTERVAL = 3;     // Action
}

// Task correspond to an action or reaction
message Task {
  string id = 1;
  optional string name = 2;
  TaskType type = 3;
  TaskAction action = 4;

  // Next task to execute (set to "" by default)
  string next_task = 5;

  // Any additional metadata required to execute the task
  google.protobuf.Struct params = 6;
}

// CRUD operation to manipulate a Task
service TaskService {
  rpc CreateTask(CreateTaskRequest) returns (Task);
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);
  rpc GetTask(GetTaskRequest) returns (Task);
  rpc UpdateTask(UpdateTaskRequest) returns (Task);
  rpc DeleteTask(DeleteTaskRequest) returns (google.protobuf.Empty);
}

message ListTasksRequest {
  optional TaskType filter_type = 1;
  optional TaskAction filter_action = 2;
}

message ListTasksResponse {
  repeated Task tasks = 1;
}

message GetTaskRequest {
  string id = 1;
}

message CreateTaskRequest {
  string workflow_id = 1;
  optional string name = 2;
  TaskType type = 3;
  TaskAction action = 4;
  string next_task = 5;
  google.protobuf.Struct params = 6;
}

message UpdateTaskRequest {
  string id = 1;
  optional string name = 2;
  optional TaskType type = 3;
  optional TaskAction action = 4;
  optional string next_task = 5;
  optional google.protobuf.Struct params = 6;
}

message DeleteTaskRequest {
  string id = 1;
}