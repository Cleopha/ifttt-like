version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "22181:22181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 22181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "19092:19092"
      - "19091:19091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:22181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://task:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
    depends_on:
      - zookeeper
    
#  task-gui:
#    container_name: task-gui
#    image: sheepkiller/task-manager:latest
#    ports:
#      - "9000:9000"
#    environment:
#      - "ZK_HOSTS=${IP}:22181"
#      - "APPLICATION_SECRET=letmein"
#      - "KM_ARGS=-Djava.net.preferIPv4Stack=true"
#    depends_on:
#      - task

  redis:
    image: bitnami/redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASS}
    ports:
      - "${REDIS_PORT}:6379"

  database:
    image: postgres:alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    networks:
      - backend

  workflow-api:
    image: area/workflow-api
    build:
      context: ../backend
      dockerfile: workflowAPI/Dockerfile
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=$WORKFLOW_API_PORT
      - DB_HOST=database
      - DB_PORT
      - DB_URL=postgresql://$DB_USER:$DB_PASS@database:$DB_PORT/$DB_NAME?schema=$DB_WORKFLOW_SCHEMA
    ports:
      - "${WORKFLOW_API_PORT}:${WORKFLOW_API_PORT}"
    networks:
      - backend
    depends_on:
      - database

  credential-api:
    image: area/credential-api
    build:
      context: ../backend
      dockerfile: credentialAPI/Dockerfile
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=$CREDENTIAL_API_PORT
      - DB_HOST=database
      - DB_PORT
      - DB_URL=postgresql://$DB_USER:$DB_PASS@database:$DB_PORT/$DB_NAME?schema=$DB_CREDENTIAL_SCHEMA
    ports:
      - "${CREDENTIAL_API_PORT}:${CREDENTIAL_API_PORT}"
    networks:
      - backend
    depends_on:
      - database

  grpc-doc:
    image: area/grpc-doc
    build:
      context: ../protos
      dockerfile: Dockerfile
    ports:
      - "${GRPC_DOC_PORT}:80"

networks:
  backend: